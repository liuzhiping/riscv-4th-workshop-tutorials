#!/usr/bin/python
# -*- coding: utf-8 -*-
# ************************************************************************
#
# (C) COPYRIGHT 2016 TECHNOLUTION BV, GOUDA NL
# | =======          I                   ==          I    =
# |    I             I                    I          I
# |    I   ===   === I ===  I ===   ===   I  I    I ====  I   ===  I ===
# |    I  /   \ I    I/   I I/   I I   I  I  I    I  I    I  I   I I/   I
# |    I  ===== I    I    I I    I I   I  I  I    I  I    I  I   I I    I
# |    I  \     I    I    I I    I I   I  I  I   /I  \    I  I   I I    I
# |    I   ===   === I    I I    I  ===  ===  === I   ==  I   ===  I    I
# |                 +---------------------------------------------------+
# +----+            |  +++++++++++++++++++++++++++++++++++++++++++++++++|
#      |            |             ++++++++++++++++++++++++++++++++++++++|
#      +------------+                          +++++++++++++++++++++++++|
#                                                         ++++++++++++++|
#                                                                  +++++|
#
# ************************************************************************
""" tool to build exploit for RISC-V tutorial demo
    
    author: Jonathan Hofman (jonathan.hofman@technolution.eu)
"""

import logging
import argparse
import struct

#################################################################################
## obtainOptions
#################################################################################
def obtainOptions():
    """ Obtain the application options. Currently the application is only 
        configured using command line arguments.
    """
    parser = argparse.ArgumentParser(description="usage: %prog [options]")
    parser.add_argument("-n", "--nm_file", dest = "nm_path", 
                      help = "bin file with application code", default='main.nm')
    parser.add_argument("-o", "--output_file", dest = "output_path", 
                      help = "output filename", default='exploit.ld')

    args = parser.parse_args()

    if args.nm_path is None:
        print "Error: nm file not set"
        exit(-1)

    if args.output_path is None:
        print "Error: output file not set"
        exit(-1)
    
    return args 

#################################################################################
## main
#################################################################################

linker_file_header = """
/******************************************************************************
 (C) COPYRIGHT 2016 TECHNOLUTION B.V., GOUDA NL
| =======          I                   ==          I    =
|    I             I                    I          I
|    I   ===   === I ===  I ===   ===   I  I    I ====  I   ===  I ===
|    I  /   \ I    I/   I I/   I I   I  I  I    I  I    I  I   I I/   I
|    I  ===== I    I    I I    I I   I  I  I    I  I    I  I   I I    I
|    I  \     I    I    I I    I I   I  I  I   /I  \    I  I   I I    I
|    I   ===   === I    I I    I  ===  ===  === I   ==  I   ===  I    I
|                 +---------------------------------------------------+
+----+            |  +++++++++++++++++++++++++++++++++++++++++++++++++|
     |            |             ++++++++++++++++++++++++++++++++++++++|
     +------------+                          +++++++++++++++++++++++++|
                                                        ++++++++++++++|
                                                                 +++++|
 -----------------------------------------------------------------------------
  Title      :  defintions of the elf file we are exploiting
  Author     :  automatically generated
 -----------------------------------------------------------------------------
  Description:  This make file is generated. Changes will likely be 
                overwritten. This link file contains all address defintions
                of the symbols in the main application we will exploit. These
                symbols can be used by the exploit as helper functions.
******************************************************************************/

SECTIONS
{
"""

linker_file_footer = "}"

rename_symbols = set((
    "__rodata_end", 
    "__rodata_start", 
    "__sbss2_end",
    "__sbss2_start",
    "__sbss_end",
    "__sbss_start",
    "_stack",
    "__stack", 
    "_stack_end",
    "_STACK_SIZE",
    "_heap", 
    "_heap_end",
    "_HEAP_SIZE",
    "_heap_start",     
    "_gp",
    "_end",
    "__data_end",
    "__data_start", 
    "__bss_end",
    "__bss_start"         
    ))



if __name__ == "__main__":
    logging.basicConfig(level   = logging.DEBUG,
                        format  = '%(asctime)s [%(levelname)-8s] %(message)s',
                        datefmt = '%H:%M:%S')   
    args = obtainOptions()

    nm = open(args.nm_path)
    output = open(args.output_path, 'w')
    
    
    output.write(linker_file_header)
    for line in nm:
        elements = line.split()
        if len(elements) == 3:
            if elements[2] in rename_symbols:
                elements[2] = "tgt" + elements[2]
            output.write("\t{2} = 0x{0};\n".format(*elements))
    output.write(linker_file_footer)
            
    
   