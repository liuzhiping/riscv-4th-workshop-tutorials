// ********************************************************************
// Actel Corporation Proprietary and Confidential
//  Copyright 2010 Actel Corporation.  All rights reserved.
//
// ANY USE OR REDISTRIBUTION IN PART OR IN WHOLE MUST BE HANDLED IN
// ACCORDANCE WITH THE ACTEL LICENSE AGREEMENT AND MUST BE APPROVED
// IN ADVANCE IN WRITING.
//
// Description:	User testbench APB3 master BFM script for CoreAPB3
//
// SVN Revision Information:
// SVN $Revision: 16193 $
// SVN $Date: 2012-01-21 13:02:21 -0800 (Sat, 21 Jan 2012) $
//
// Resolved SARs
// SAR      Date     Who   Description
//
// Notes:
//
// ********************************************************************

#-----------------------------------------------------------
# Memory Map
# Define name and base address of each resource.
#-----------------------------------------------------------
memmap slave0  0x00000000;
memmap slave1  0x10000000;
memmap slave2  0x20000000;
memmap slave3  0x30000000;
memmap slave4  0x40000000;
memmap slave5  0x50000000;
memmap slave6  0x60000000;
memmap slave7  0x70000000;
memmap slave8  0x80000000;
memmap slave9  0x90000000;
memmap slave10 0xa0000000;
memmap slave11 0xb0000000;
memmap slave12 0xc0000000;
memmap slave13 0xd0000000;
memmap slave14 0xe0000000;
memmap slave15 0xf0000000;

// global variables to store local copy of testbench parameters and constants
// derived from testbench parameters
int APB_DWIDTH
int RANGESIZE
int IADDR_ENABLE
int APBSLOT0ENABLE
int APBSLOT1ENABLE
int APBSLOT2ENABLE
int APBSLOT3ENABLE
int APBSLOT4ENABLE
int APBSLOT5ENABLE
int APBSLOT6ENABLE
int APBSLOT7ENABLE
int APBSLOT8ENABLE
int APBSLOT9ENABLE
int APBSLOT10ENABLE
int APBSLOT11ENABLE
int APBSLOT12ENABLE
int APBSLOT13ENABLE
int APBSLOT14ENABLE
int APBSLOT15ENABLE


procedure main
header "CoreAPB3 Test Harness"
debug 3;

// initialize local variables passed from testbench HDL to the
// ARGVALUE* BFM parameters
call init_parameter_vars

# Slave0
if APBSLOT0ENABLE
      print " ------------------- Checking slot0 ------------------- "
      write     w slave0 0x0 0x12345678;
      readcheck w slave0 0x0 0x12345678;
endif

# Slave1
if APBSLOT1ENABLE
      print " ------------------- Checking slot1 ------------------- "
      write     w slave1 0x0 0x12345678;
      readcheck w slave1 0x0 0x12345678;
endif

# Slave2
if APBSLOT2ENABLE
      print " ------------------- Checking slot2 ------------------- "
      write     w slave2 0x0 0x12345678;
      readcheck w slave2 0x0 0x12345678;
endif

# Slave3
if APBSLOT3ENABLE
      print " ------------------- Checking slot3 ------------------- "
      write     w slave3 0x0 0x12345678;
      readcheck w slave3 0x0 0x12345678;
endif

# Slave4
if APBSLOT4ENABLE
      print " ------------------- Checking slot4 ------------------- "
      write     w slave4 0x0 0x12345678;
      readcheck w slave4 0x0 0x12345678;
endif

# Slave5
if APBSLOT5ENABLE
      print " ------------------- Checking slot5 ------------------- "
      write     w slave5 0x0 0x12345678;
      readcheck w slave5 0x0 0x12345678;
endif

# Slave6
if APBSLOT6ENABLE
      print " ------------------- Checking slot6 ------------------- "
      write     w slave6 0x0 0x12345678;
      readcheck w slave6 0x0 0x12345678;
endif

# Slave7
if APBSLOT7ENABLE
      print " ------------------- Checking slot7 ------------------- "
      write     w slave7 0x0 0x12345678;
      readcheck w slave7 0x0 0x12345678;
endif

# Slave8
if APBSLOT8ENABLE
      print " ------------------- Checking slot8 ------------------- "
      write     w slave8 0x0 0x12345678;
      readcheck w slave8 0x0 0x12345678;
endif

# Slave9
if APBSLOT9ENABLE
      print " ------------------- Checking slot9 ------------------- "
      write     w slave9 0x0 0x12345678;
      readcheck w slave9 0x0 0x12345678;
endif

# Slave10
if APBSLOT10ENABLE
      print " ------------------- Checking slot10 ------------------- "
      write     w slave10 0x0 0x12345678;
      readcheck w slave10 0x0 0x12345678;
endif

# Slave11
if APBSLOT11ENABLE
      print " ------------------- Checking slot11 ------------------- "
      write     w slave11 0x0 0x12345678;
      readcheck w slave11 0x0 0x12345678;
endif

# Slave12
if APBSLOT12ENABLE
      print " ------------------- Checking slot12 ------------------- "
      write     w slave12 0x0 0x12345678;
      readcheck w slave12 0x0 0x12345678;
endif

# Slave13
if APBSLOT13ENABLE
      print " ------------------- Checking slot13 ------------------- "
      write     w slave13 0x0 0x12345678;
      readcheck w slave13 0x0 0x12345678;
endif

# Slave14
if APBSLOT14ENABLE
      print " ------------------- Checking slot14 ------------------- "
      write     w slave14 0x0 0x12345678;
      readcheck w slave14 0x0 0x12345678;
endif

# Slave15
if APBSLOT15ENABLE
      print " ------------------- Checking slot15 ------------------- "
      write     w slave15 0x0 0x12345678;
      readcheck w slave15 0x0 0x12345678;
endif

return

//---------------------------------------------------------------------------
// initialize local variables from the ARGVALUE* BFM parameters passed
// down from the testbench HDL
//---------------------------------------------------------------------------


procedure init_parameter_vars
	set APB_DWIDTH          $ARGVALUE0
	set RANGESIZE           $ARGVALUE1
	set IADDR_ENABLE        $ARGVALUE2
	set APBSLOT0ENABLE      $ARGVALUE3
	set APBSLOT1ENABLE      $ARGVALUE4
	set APBSLOT2ENABLE      $ARGVALUE5
	set APBSLOT3ENABLE      $ARGVALUE6
	set APBSLOT4ENABLE      $ARGVALUE7
	set APBSLOT5ENABLE      $ARGVALUE8
	set APBSLOT6ENABLE      $ARGVALUE9
	set APBSLOT7ENABLE      $ARGVALUE10
	set APBSLOT8ENABLE      $ARGVALUE11
	set APBSLOT9ENABLE      $ARGVALUE12
	set APBSLOT10ENABLE     $ARGVALUE13
	set APBSLOT11ENABLE     $ARGVALUE14
	set APBSLOT12ENABLE     $ARGVALUE15
	set APBSLOT13ENABLE     $ARGVALUE16
	set APBSLOT14ENABLE     $ARGVALUE17
	set APBSLOT15ENABLE     $ARGVALUE18
return
