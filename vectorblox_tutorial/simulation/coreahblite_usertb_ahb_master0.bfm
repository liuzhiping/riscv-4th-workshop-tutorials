// ********************************************************************
// Actel Corporation Proprietary and Confidential
//  Copyright 2010 Actel Corporation.  All rights reserved.
//
// ANY USE OR REDISTRIBUTION IN PART OR IN WHOLE MUST BE HANDLED IN
// ACCORDANCE WITH THE ACTEL LICENSE AGREEMENT AND MUST BE APPROVED
// IN ADVANCE IN WRITING.
//
// Description:	User testbench AHBLite master 0 BFM script for CoreAHBLite
//
// Revision Information:
// Date     Description
// 10Feb10		Production Release Version 3.1
//
// SVN Revision Information:
// SVN $Revision: 16871 $
// SVN $Date: 2012-05-05 10:04:42 -0700 (Sat, 05 May 2012) $
//
// Resolved SARs
// SAR      Date     Who   Description
//
// Notes:
// 1. best viewed with tabstops set to "4"
// 2. Most of the behavior is driven from the BFM script for the AHBLite master.
//    Consult the Actel AMBA BFM documentation for more information.
// 3. All procedures, variables, and constants used by the 'main' procedure
//    are declared in the include file "coreahblite_usertb_include.bfm"
//
// History:		11/05/08  - TFB created
//
// *********************************************************************

// include constants, and miscellaneous procedures used in this main file
include "coreahblite_usertb_include.bfm"

procedure main
	int i
	int j
	int k
	int dtmp[4]
	int atmp
	int cond[2]
    int mode0_slot_incr

	header "User Testbench for CoreAHBLite: BFM AHBLite Master 0 Test Harness"
	print "(c) Copyright 2010 Actel Corporation. All rights reserved."
	call pr_underscores

	debug 1			// only text strings printed
	timeout 2000	// timeout in cycles, in case BFM stalls
	wait 1

	// initialize local variables passed from testbench HDL to the
	// ARGVALUE* BFM parameters
	call init_parameter_vars

	wait 2

# test byte/halfword/word writes and reads for all enabled slots
set cond[0] MEMSPACE == 0
if cond[0]
	call pr_underscores
	print "Master 0, memory space = 4GB, testing beginning at: %0d ns." $TIME
	call pr_underscores
    set mode0_slot_incr	0x10000000;
else
	call pr_underscores
	print "Master 0, memory space = 256MB, testing beginning at: %0d ns." $TIME
	call pr_underscores
    set mode0_slot_incr	0x01000000;
endif

//========================================================================
	loop i 0 15 1
      if SC[i] == 0
		if M0_AHBSLOTENABLE[i]
			call pr_underscores
			print "Master 0 testing AHBLite slot:%0d at: %0d ns." i $TIME
			call pr_underscores
			// write/read 32-bit word
			set atmp i * mode0_slot_incr + 0x0
			set dtmp[0] 0x12345678
			print "Master 0 writes:%08x to AHBLite slave:%0d at: %0d ns." dtmp[0] i $TIME
			write w BASE atmp dtmp[0]
			print "Master 0 verifying (reading):%08x from AHBLite slave:%0d at: %0d ns." dtmp[0] i $TIME
			read w BASE atmp
			wait 8
			// write/read 16-bit halfwords
			set dtmp[0] 0xdead
			set dtmp[1] 0xbeef
			loop j 0 1 1
				set k j * 2
				set atmp i * mode0_slot_incr + k
				print "Master 0 writes:%04x to AHBLite slave:%0d at: %0d ns." dtmp[j] i $TIME
				write h BASE atmp dtmp[j]
			endloop
			loop j 0 1 1
				set k j * 2
				set atmp i * mode0_slot_incr + k
				print "Master 0 verifying (reading):%04x from AHBLite slave:%0d at: %0d ns." dtmp[j] i $TIME
				readcheck h BASE atmp dtmp[j]
			endloop
			wait 8
			// write/read 8-bit bytes
			set dtmp[0] 0x9a
			set dtmp[1] 0x56
			set dtmp[2] 0x34
			set dtmp[3] 0x12
			loop j 0 3 1
				set k j * 1
				set atmp i * mode0_slot_incr + k
				print "Master 0 writes:%02x to AHBLite slave:%0d at: %0d ns." dtmp[j] i $TIME
				write b BASE atmp dtmp[j]
			endloop
			loop j 0 3 1
				set k j * 1
				set atmp i * mode0_slot_incr + k
				print "Master 0 verifying (reading):%02x from AHBLite slave:%0d at: %0d ns." dtmp[j] i $TIME
				readcheck b BASE atmp dtmp[j]
			endloop
			wait 8
			// write/read 32-bit word 0xaaaaaaaa
			set atmp i * mode0_slot_incr + 0x0
			set dtmp[0] 0xaaaaaaaa
			print "Master 0 writes:%08x to AHBLite slave:%0d at: %0d ns." dtmp[0] i $TIME
			write w BASE atmp dtmp[0]
			print "Master 0 verifying (reading):%08x from AHBLite slave:%0d at: %0d ns." dtmp[0] i $TIME
			readcheck w BASE atmp dtmp[0]
			wait 8
			// write/read 32-bit word 0x55555555
			set atmp i * mode0_slot_incr + 0x0
			set dtmp[0] 0x55555555
			print "Master 0 writes:%08x to AHBLite slave:%0d at: %0d ns." dtmp[0] i $TIME
			write w BASE atmp dtmp[0]
			print "Master 0 verifying (reading):%08x from AHBLite slave:%0d at: %0d ns." dtmp[0] i $TIME
			readcheck w BASE atmp dtmp[0]
			wait 8
			print "Master 0 done testing AHBLite slot:%0d at: %0d ns." i $TIME
			call pr_underscores
		else
			call pr_underscores
			print "Master 0 skipping test of AHBLite slot:%0d at: %0d ns." i $TIME
			call pr_underscores
		endif
      else
        call pr_underscores
        print "Master 0 skipping test of AHBLite slot:%0d at: %0d ns." i $TIME
        call pr_underscores
      endif
		// wait here between loops
	endloop
//========================================================================

return
